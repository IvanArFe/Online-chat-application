# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import name_server_pb2 as name__server__pb2


class ServidorNombresStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/nameserver.ServidorNombres/Register',
                request_serializer=name__server__pb2.RegisterRequest.SerializeToString,
                response_deserializer=name__server__pb2.Empty.FromString,
                )
        self.GetAddress = channel.unary_unary(
                '/nameserver.ServidorNombres/GetAddress',
                request_serializer=name__server__pb2.GetAddressRequest.SerializeToString,
                response_deserializer=name__server__pb2.GetAddressResponse.FromString,
                )


class ServidorNombresServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServidorNombresServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=name__server__pb2.RegisterRequest.FromString,
                    response_serializer=name__server__pb2.Empty.SerializeToString,
            ),
            'GetAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddress,
                    request_deserializer=name__server__pb2.GetAddressRequest.FromString,
                    response_serializer=name__server__pb2.GetAddressResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nameserver.ServidorNombres', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServidorNombres(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameserver.ServidorNombres/Register',
            name__server__pb2.RegisterRequest.SerializeToString,
            name__server__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameserver.ServidorNombres/GetAddress',
            name__server__pb2.GetAddressRequest.SerializeToString,
            name__server__pb2.GetAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
